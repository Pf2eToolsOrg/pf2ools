const a = /* @__PURE__ */ location.pathname.split("/").slice(0, -1).join("/"), c = [
  a + "/_app/immutable/entry/app.ee1b1467.js",
  a + "/_app/immutable/assets/0.16fbc15a.css",
  a + "/_app/immutable/nodes/0.6cda73c3.js",
  a + "/_app/immutable/nodes/1.edcbaa85.js",
  a + "/_app/immutable/nodes/2.cec0eb6d.js",
  a + "/_app/immutable/assets/3.5b11e624.css",
  a + "/_app/immutable/nodes/3.9e9c97ba.js",
  a + "/_app/immutable/nodes/4.89c3167c.js",
  a + "/_app/immutable/assets/5.c9c22b2a.css",
  a + "/_app/immutable/nodes/5.339af482.js",
  a + "/_app/immutable/assets/MiscUtils.4f1e9ba5.css",
  a + "/_app/immutable/assets/Renderer.04f6ba9f.css",
  a + "/_app/immutable/chunks/MiscUtils.98406143.js",
  a + "/_app/immutable/chunks/Renderer.30b04fec.js",
  a + "/_app/immutable/chunks/fa.11a4a72a.js",
  a + "/_app/immutable/assets/fa.95b16411.css",
  a + "/_app/immutable/chunks/index.6705a80d.js",
  a + "/_app/immutable/chunks/index.be22c6cd.js",
  a + "/_app/immutable/chunks/index.e248da5c.js",
  a + "/_app/immutable/chunks/preload-helper.41c905a7.js",
  a + "/_app/immutable/chunks/singletons.2fc92931.js",
  a + "/_app/immutable/chunks/stores.8fcde07e.js",
  a + "/_app/immutable/entry/start.9af92ef1.js",
  a + "/_app/immutable/chunks/ancestry-anadi.5d95feb4.js",
  a + "/_app/immutable/chunks/ancestry-android.14e4c6de.js",
  a + "/_app/immutable/chunks/ancestry-automaton.b9e564f7.js",
  a + "/_app/immutable/chunks/ancestry-azarketi.8eef2316.js",
  a + "/_app/immutable/chunks/ancestry-catfolk.5f1983e3.js",
  a + "/_app/immutable/chunks/ancestry-conrasu.6677eac7.js",
  a + "/_app/immutable/chunks/ancestry-dwarf.357f1b8e.js",
  a + "/_app/immutable/chunks/ancestry-elf.03f5f640.js",
  a + "/_app/immutable/chunks/ancestry-fetchling.2080607e.js",
  a + "/_app/immutable/chunks/ancestry-fleshwarp.4caf5c3c.js",
  a + "/_app/immutable/chunks/ancestry-ghoran.4b9c8bfb.js",
  a + "/_app/immutable/chunks/ancestry-gnoll.de6d200a.js",
  a + "/_app/immutable/chunks/ancestry-gnome.3dd93eec.js",
  a + "/_app/immutable/chunks/ancestry-goblin.2f52ce01.js",
  a + "/_app/immutable/chunks/ancestry-goloma.bff16acf.js",
  a + "/_app/immutable/chunks/ancestry-grippli.ba8aa686.js",
  a + "/_app/immutable/chunks/ancestry-halfling.8b77381b.js",
  a + "/_app/immutable/chunks/ancestry-hobgoblin.85b8dd50.js",
  a + "/_app/immutable/chunks/ancestry-human.d3c0d3d9.js",
  a + "/_app/immutable/chunks/ancestry-kashrishi.23168fdb.js",
  a + "/_app/immutable/chunks/ancestry-kitsune.9cefc9b8.js",
  a + "/_app/immutable/chunks/ancestry-kobold.764fb600.js",
  a + "/_app/immutable/chunks/ancestry-leshy.3fdeaedd.js",
  a + "/_app/immutable/chunks/ancestry-lizardfolk.81fafb18.js",
  a + "/_app/immutable/chunks/ancestry-nagaji.1ccc5ae2.js",
  a + "/_app/immutable/chunks/ancestry-orc.d8b3d270.js",
  a + "/_app/immutable/chunks/ancestry-poppet.aa19d9dd.js",
  a + "/_app/immutable/chunks/ancestry-ratfolk.727a2728.js",
  a + "/_app/immutable/chunks/ancestry-shisk.f8091b2b.js",
  a + "/_app/immutable/chunks/ancestry-shoony.f6a4fe66.js",
  a + "/_app/immutable/chunks/ancestry-skeleton.91c3ab22.js",
  a + "/_app/immutable/chunks/ancestry-sprite.2bf7097b.js",
  a + "/_app/immutable/chunks/ancestry-strix.9fbd5e31.js",
  a + "/_app/immutable/chunks/ancestry-tengu.8cc46df0.js",
  a + "/_app/immutable/chunks/ancestry-vanara.76fa06e7.js",
  a + "/_app/immutable/chunks/ancestry-vishkanya.97fce2f2.js"
], i = [
  a + "/fonts/AlbertusMT.ttf",
  a + "/fonts/Basing.ttf",
  a + "/fonts/Blambot-Casual-Regular.ttf",
  a + "/fonts/Convergence-Regular.ttf",
  a + "/fonts/Dax-Regular.ttf",
  a + "/fonts/Dax-bold.ttf",
  a + "/fonts/Gin-Regular.ttf",
  a + "/fonts/OFL.txt",
  a + "/fonts/Pathfinder2eActions.ttf",
  a + "/fonts/Quicksand.ttf",
  a + "/fonts/Roboto-regular.ttf",
  a + "/fonts/Sabon-Bold.ttf",
  a + "/fonts/Sabon-BoldItalic.ttf",
  a + "/fonts/Sabon-Italic.ttf",
  a + "/fonts/Sabon-Roman.ttf",
  a + "/fonts/SabonLTStd-Bold.ttf",
  a + "/fonts/SabonLTStd-BoldItalic.ttf",
  a + "/fonts/SabonLTStd-Italic.ttf",
  a + "/fonts/SabonLTStd-Roman.ttf",
  a + "/fonts/Taroca.ttf",
  a + "/fonts/fa-light-300.eot",
  a + "/fonts/fa-light-300.ttf",
  a + "/fonts/fa-light-300.woff",
  a + "/fonts/fa-light-300.woff2",
  a + "/fonts/fa-regular-400.eot",
  a + "/fonts/fa-regular-400.ttf",
  a + "/fonts/fa-regular-400.woff",
  a + "/fonts/fa-regular-400.woff2",
  a + "/fonts/fa-solid-900.eot",
  a + "/fonts/fa-solid-900.ttf",
  a + "/fonts/fa-solid-900.woff",
  a + "/fonts/fa-solid-900.woff2",
  a + "/fonts/glyphicons-halflings-regular.eot",
  a + "/fonts/glyphicons-halflings-regular.svg",
  a + "/fonts/glyphicons-halflings-regular.ttf",
  a + "/fonts/glyphicons-halflings-regular.woff",
  a + "/fonts/glyphicons-halflings-regular.woff2",
  a + "/fonts/good-pro-400.ttf",
  a + "/fonts/good-pro-400.woff",
  a + "/fonts/good-pro-400.woff2",
  a + "/fonts/good-pro-700.ttf",
  a + "/fonts/good-pro-700.woff",
  a + "/fonts/good-pro-700.woff2",
  a + "/fonts/good-pro-condensed-400.ttf",
  a + "/fonts/good-pro-condensed-400.woff",
  a + "/fonts/good-pro-condensed-700.ttf",
  a + "/fonts/good-pro-condensed-700.woff",
  a + "/fonts/good-pro-condensed-700.woff2",
  a + "/fonts/good-pro-condensed-italic-400.ttf",
  a + "/fonts/good-pro-condensed-italic-400.woff",
  a + "/fonts/good-pro-condensed-italic-700.ttf",
  a + "/fonts/good-pro-condensed-italic-700.woff",
  a + "/fonts/good-pro-condensed-italic-700.woff2",
  a + "/fonts/good-pro-italic-400.ttf",
  a + "/fonts/good-pro-italic-400.woff",
  a + "/fonts/good-pro-italic-400.woff2",
  a + "/fonts/good-pro-italic-700.ttf",
  a + "/fonts/good-pro-italic-700.woff",
  a + "/fonts/good-pro-italic-700.woff2",
  a + "/fonts/languages/CRB/Draconic/Iokharic Bold Italic.otf",
  a + "/fonts/languages/CRB/Draconic/Iokharic Bold.otf",
  a + "/fonts/languages/CRB/Draconic/Iokharic Italic.otf",
  a + "/fonts/languages/CRB/Draconic/Iokharic.otf",
  a + "/fonts/languages/CRB/Dwarven/Davek Bold Italic.otf",
  a + "/fonts/languages/CRB/Dwarven/Davek Bold.otf",
  a + "/fonts/languages/CRB/Dwarven/Davek Italic.otf",
  a + "/fonts/languages/CRB/Dwarven/Davek.otf",
  a + "/fonts/languages/CRB/Dwarven/Dethek Alt.ttf",
  a + "/fonts/languages/CRB/Dwarven/Dethek Bold Italic.otf",
  a + "/fonts/languages/CRB/Dwarven/Dethek Bold.otf",
  a + "/fonts/languages/CRB/Dwarven/Dethek Italic.otf",
  a + "/fonts/languages/CRB/Dwarven/Dethek Stone.ttf",
  a + "/fonts/languages/CRB/Dwarven/Dethek.otf",
  a + "/fonts/languages/CRB/Dwarven/Olde Dethek Italic.otf",
  a + "/fonts/languages/CRB/Dwarven/Olde Dethek.otf",
  a + "/fonts/languages/CRB/Elven/Espruar 2e.ttf",
  a + "/fonts/languages/CRB/Elven/Espruar 3e Bold Italic.otf",
  a + "/fonts/languages/CRB/Elven/Espruar 3e Bold.otf",
  a + "/fonts/languages/CRB/Elven/Espruar 3e Italic.otf",
  a + "/fonts/languages/CRB/Elven/Espruar 3e.otf",
  a + "/fonts/languages/CRB/Elven/Espruar 3e.ttf",
  a + "/fonts/languages/CRB/Elven/Espruar 5e.ttf",
  a + "/fonts/languages/CRB/Elven/Olde Espruar.otf",
  a + "/fonts/languages/CRB/Elven/Rellanic Bold Italic.otf",
  a + "/fonts/languages/CRB/Elven/Rellanic Bold.otf",
  a + "/fonts/languages/CRB/Elven/Rellanic Italic.otf",
  a + "/fonts/languages/CRB/Elven/Rellanic.otf",
  a + "/fonts/languages/CRB/Human/Harpers.ttf",
  a + "/fonts/languages/CRB/Human/Olde Thorass.otf",
  a + "/fonts/languages/CRB/Human/Thorass Bold Italic.otf",
  a + "/fonts/languages/CRB/Human/Thorass Bold.otf",
  a + "/fonts/languages/CRB/Human/Thorass Italic.otf",
  a + "/fonts/languages/CRB/Human/Thorass.otf",
  a + "/fonts/languages/CRB/Infernal/Barazhad Bold Italic.otf",
  a + "/fonts/languages/CRB/Infernal/Barazhad Bold.otf",
  a + "/fonts/languages/CRB/Infernal/Barazhad Italic.otf",
  a + "/fonts/languages/CRB/Infernal/Barazhad.otf",
  a + "/fonts/languages/CRB/Infernal/Infernal.ttf",
  a + "/icons/Background.svg",
  a + "/icons/NoBackground.svg",
  a + "/icons/safari-pinned-tab.svg"
], u = "1683666118243", f = `cache-${u}`, l = [
  ...c,
  // the app itself
  ...i.filter((t) => !t.startsWith("/data"))
  // everything in `static` but the actual data
];
self.addEventListener("install", (t) => {
  async function n() {
    await (await caches.open(f)).addAll(l);
  }
  t.waitUntil(n());
});
self.addEventListener("activate", (t) => {
  async function n() {
    for (const s of await caches.keys())
      s !== f && await caches.delete(s);
  }
  t.waitUntil(n());
});
self.addEventListener("fetch", (t) => {
  if (t.request.method !== "GET" || !t.request.url.startsWith("http"))
    return;
  async function n() {
    const s = new URL(t.request.url), e = await caches.open(f);
    if (l.includes(s.pathname))
      return e.match(s.pathname);
    try {
      const o = await fetch(t.request);
      return o.status === 200 && e.put(t.request, o.clone()), o;
    } catch {
      return e.match(t.request);
    }
  }
  t.respondWith(n());
});
